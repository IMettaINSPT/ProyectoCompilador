MOV [EDI + 0] , EAX

se traduce como BF 00 00 00 00 

cargar byte BF
cargar int 0000 (en windows son 32 bits)

Identificadores y numeros de factor se guardar en la pila (push en la pila)

ej A := 17 *X;

push 17 
push x

cuando se ejecuta hago 

pop pila
pop pila
push 17 *x 

cuando paso por factor cargo el registro y lo cargo en la pila

---------------TERMINO---

si hay dos factores , los saca de la pila , OPERA y lo guarda en la pila


A * B * 2 
PUSH A
PUSH B
POP A
OPO B
PUSH A*B 
POP A*B
PUSH 2
PUSH (A*B) / 2


En variable local del termino  me tuve que haber guardado si pase por el * o por el / 
para que al leer el segundo factor sepa que operacion hacer. Luego 


Para division tengo que completar el registro para volverlo de 32 bits .
Para eso uso la instrucion CDQ (99) 

EDX:EAX ┐ EBX (divide eax por ebx y deja el resultado en edx)

64 bits ┐ 32 bits


----------------------

Expresion

Necesito una variable auxilia de tipo simbolo para saber si paso por el - del termino (ejemplo -7)

si empece con un - numero tengo que :
pop EAX
NEG EAX
pop EAX


Al momento de hacer la cuenta: 

si es una suma 2+ 3 ->  pop eax, pop ebx ,IMUL EBX ,push eax
si es una resta 2 -3 ->
pop EAX
pop EBX
xchg EAX, EBX
SUB EAX, EBX
PUSH EAX 

ejemplo 7 -3 

*****
* 3 *
*****
* 7 *
*****
 
al momento de hacer 

eN CASO DE condicion:

if cond then Proposiocn

luego de las instrucciones de cond me tengo que guardar en una variable local  el .size del vector de memoria que me ind 

el 0 a corregir es 4 posiciones antes del .size
cuando tenga que corregir va a ser punto de correccion menos 4.


es decir yo hice JMP 00 00 00 00  (este jump lo uso para saltearme la proposicion, es decir posicion de corte del ciclo , los jmp llevan una distancia de salto)
al momento de cagar en el vector hago
cargar byte JMP
cargar int 0000
cargar int 0000  (carga 4 bytes)
 en este momento  me guardo en la variable aux el .size del vector que es la ultima posicion cargada en memoria.
Despues de cargar las instrucciones de proposiciones tengo que cargar en la posicion cargada en la variable -4 (porque reemplazo los primeros 4 0 ) el valor de .size final - variable aux.



call dividir
uso instruccion call 

 ┐ E8 (call) direccion procedure ┐ *

cuando me paro y leo un call tengo que hacer un call a la direccion correspondiente :

(direccion procedure cargado en tabla de analisis semantico) - ( posicion actual del salto  + 5 ( me salteo las 5 instruccion del llamado al procedure ))

OJO!! me tengo que guardar en una posicion de memoria previa  (el .size del array) a la condicion para luego de ejecutar la proposicion de while, vuelva a llamar a ese condicion. SOLO EN WHILE, en if es directo. 
--------------
readln (x)

call a la instruccion ya cargada:

hago igual que antes 

antes de hacer el call hago cuenta

y despues E8 entero de la cuenta. 

call 590 (quiero llegar al 590 , E8 _ _ _ _  ( P - (POS ACTUAAL + 5))
mov [EDI + TAMAÑO] , EAX





Pos absoluta 

direccion donde carga la imagen ( pos 212 al 215 ) : 00040000
+ direccion donde carga  (pos 200) 

BaseOfCode + ImageBase - size of header               + size actual
		          (pos 244 del header en memo)


4000 + 1500 - header ( 200) + size ( 700 y algo ) ac estoy pra



244 pos size of header


ajustes:
cambiar tamaño tmaño posicion 0 (size - tamaño de header)
*mientras no sea multiplo de fileAligmen agrego un 0


cada bloque va  a tener como primera instruccion un jmp con basura (0000) para luego reemplazar con la distancia a la proposicion correspondiente a la proposicion de su bloque. Para eso me guardo en una variable auxiliar la posicion de memoria en donde estoy (.size()) , luego sigo traduciendo instruccion y antes de empezar la proposicion reemplazo la posicion de memoria (uso cargarEn ) del jmp con la cuenta (